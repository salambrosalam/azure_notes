
Azure notes

=================================

Deply and Manage compute resources



Default creating windows VM using azure gui.
B1s size is free for 750 hours per month (if free-tier period)
Windows Server prefer config: (2vcpus, 8GB RAM)

Security group is creating by default with VM (if you will not choose any security group)
Azure Virtual Network - is isolated network on the Azure Cloud

If you have some issues with limits of creating VMs, you have to create request for extension of limit (Microsoft.Compute)


IIS - web server on windows
how to install it using GUI:
>"Add features"
>in section "Server Roles" click on Web Server (IIS)
>add PORT 80 as allowed in network security group (nsg) attached to this VM 
Then just "next" and install :)

In Azure Subscription you should to create your monthly budget and budget alert (for example 80% percents of used budget)

No costs resources: Virtual Network, NSG, Network interface

State of the Virtual Machine:

Types of disks:
>OS disk (Managed Disk -Designed for high availability, all aspects of the disk will be managed by Azure themselves)
>Temporary disk - size varies depending on the instance size, data on the temporary disk is lostu during a maintenance event, data is lost when you redeploy or STOP and START the VM,
you will not LOST your data in case of RESTART VM                  

Azure have a separeted costs of a resource, even if your VM is shutdown you'll pay for disks (of this VM)                                                                                 

SSH tip: pub key is stored on VM, you will get private key for connet and auth on this VM 


Azure Disks:

>Management - You have Azure Managed Disks that are completely managed by Azure
>Virtualized - Its like having physical disks but they are virtualized
>Highly available - Designed with 99.999% availability
>Support - Has support with features such as Availability Zones, Azure Backup etc.

Disk Types:
>Standard HDD - This is ideal for backup environments and non-critical workloads. Max disk size - 32 767 GB, Max throughput - 500MB/s Max IOPS - 2000
>Standard SSD - This is ideal for Web Servers and Dev/Test Environments. Max disk size - 32 767 GB, Max throughput - 750 MB/s, Max IOPS - 6000.
>Premium SSD - This is ideal for Production environments. Max disk size - 32 767 GB, Max throughput - 950 MB/s, Max IOPS - 20 000.
>Ultra Disk - This is ideal for Input/Output instensive workloads - SQL, Oracle databases. Max disk size - 65 536 GB, Max throughput - 4000 MB/s. Max IOPS - 160 000.


Server-Side Disk Encryption:

Your data is automatically encrypted using 256-bit AES Encryption
This protects the data at rest
This is done for Managed disks - OS and data Disks

It's need to if this disk will be stolen, hackers can't get data from disk cause encryption

for example: 
Encryption: SSE (Server-Side Encryption) with PMK (Platform managed key). That means that key to decrypt this key is stored on platform.

You also have option "Customer keys for encryption":
> you can store your keys using "Azure key vault"
to make this:
>create key vault
>create key
>create disk encryption set
>encrypt disk with "disk encryption set"

Azure Disk Encryption:

os Windows (with bit locker) on Linux with DM-Crypt
Encrypt your disk volumes:
>create key in key vault
>open additional settings and enable disks to encrypt (OS and data disks), and choose current key.

IOPS - Input/Output operations per second (read and writes to data, for example from database)
Throughput - Amount of data is being sent to the storage disk at a specified interval (MB per sec)

Disk snapshot:

To make snapshot of disk on Azure:
>Create disk
>click "Create snapshot"

Snapshot it's READ-ONLY disk replica, but you can create disk based on snapshot (for exapmle, you will get data from snapshot on disk based on this snapshot)

Shared Disk:

Azure Shared Disk - This allows a managed disk to be attached to multiple virtual machine, can only enable for PREMIUM and ULTRA disks!

how to make:
>Create "Managed Disk"
>Configure VM's (this should be the same location as this share disk)
>To attach disk, you have to stop VM 

Manage and UnManaged Disks:

Managed disk - you get high availability. Because the data is replicated automatically on different places within Azure Data center.
Un-managed disk - you own disk, not managed by Azure and these disk will be stored in Azure blob's storage and then you can attach disk to the VM.

NOTE: You can't have both managed and un-managed disk with VM

Ok difference in cost. For the managed disk you will pay for all space (for example 128GB), in un-managed disk only for space wich you consumes.

The storage account disk type (premium SSD or standard SSD, HDD) should be the same like a disk for VM

how to make un-managed disk:
>create storage account
>on stage of creating VM, on "Disks" disable managed disks, and enable "Use ephemeral OS disk" and choose storage account

Un-managed disks stored in "vhds container" in storage account

Custom Script Extensions:

This tool can be used on Azure virtual Machines to download and execute scripts.
This is ideal when you want to deploy any custom configuration of any software installation on a virtual machine.
The scripts can be located in an Azure storage account or even on GitHub.
A time duration of 90 minutes is allowed for the script to run. Any longer and the result will be a failed extension provision.
It's ideal not to place reboots inside the scripts, because the extension will not continue after the reboot. Hence if have other commands that need to run via the extension after the reboot, they won't run.
If your scipt does need a reboot, then maybe you can look at other tools such as Desired State Configuration, Chef or Puppet.
The script will run only once.
The Custom Script Extension will run under the impersonation of the LocalSystem Account.

On Windows - PowerShell scripts.
On Linux - Bash scripts 

Cloud init - this is scripts like Script Extensions but in plain text way, you should not download script file and with Azure syntax
you could run Azure Scripts, example:

#cloud-config
package_upgrade: true
packages: 
	- nginx

Boot Diagnostics:

This is option to diagnostics for VM (during the time of VM)

Serial Console:

To use this option you have to use "Enable with custom storage account" in Boot diagnostics
Using serial console you could connect to VM using console

Run Command:

Useful option to run some scripts on running VM
 
Azure Bastion Service:

Azure Bastion Service - Fully managed PaaS service to connect to the VM's without public IP (throw this Bastion Host)
Provides RDP/SSH connectivity to virtual machines from the Azure Portal via TLS

Azure Bastion - must have subnet name "AzureBastionSubnet". This subnet will host Bastion compute instances
Then we should to assign public IP address to bastion.
Then to use just click "Bastion" in connection section (in VM menu)

Basic tier of Bastion host - can't change bastion compute instances
Standard tier of Bastion host - can change bastion compute instances

Availability sets:
An availability set is a logical grouping of VMs that allows Azure to understand how your application is built to provide for redundancy and availability

Using availiability sets you will get an SLA of 99.95% 

Fault domain - define the group of virtual machines that share a common power source and network switch (server rack). By default, the virtual machines configured within your availability set are separated across up to three fault domains.You can have up to 3 fault domains.
Update domain - Update domains indicate groups of virtual machines and underlying physical hardware that can be rebooted at the same time. You can have up to 20 update domains.

In 1 fault domain you can have a few update domains

Proximity placement group - store your machines closer together to get better communications, you can choose this option
ONLY when you create a virtual machine you can assign the availability set!

Availability zones:

Availibility zones - are unique physical locations that are equipped with independent power, cooling and networking.
There are normally three Availiability zones in region.

Using this we will get extra costs for bandwith

Using availiability sets you will get an SLA of 99.99% 

Using scale set, you can choose multiple availability zones

Azure Scale sets:

Scale set - this is tool to distribute the load on several machines instead of one. (for example: To scale from 1 machine to 3)
We can define the rules. The rule is based on a condition. Scale out - if the CPU percentage > 70% then add one machine, scale in - if the CPU percentage < 70 % then delete one machine
To define the scaling rule:

Open "Scaling" section in scale-set:
>enable "Custom autoscale"
>define the auto-scaling rule

There two types: 
>Uniform orchestration mode - Optimized for large scale stateless workloads with identical instances
>Flexible orchestration mode - achieve high availability at scale with identical or multiple virtual machine types

In uniform mode - you have separate API's of scale set to manage this VM's
in flexible mode - you have normal VM API's to manage VM. (resources creates like a separate VM)

VM Image:

Image - This is a copy of the full VM which includes the data disks or just the OS disk
You can create an image and place as part of an Azure compute gallery

You can share the Azure compute gallery across your organizations so that other users can create VM's based on the images stored in the gallery
Image Definition - This is a grouping of image versions. Each image definition has information about why the image was created and other information related to the image
Image Version - this is used to create the VM.
Two types of images that you can create:
>Specialized VM images. Here information about specific users and machine information is retained. So new VM's created out of the image will have the same computer name and admin user information.
>Generalized VM images. Here information about specific users and machine information is removed.  Here you have to perform the process of generalization. The original VM is unusable after you perform this process.

Generalized VM:
>on Windows you have path: C:/Windows/System32/Sysprep/  here will be app (sysprep)
>enable "Generalize" to prepare machine to Generalized Image (this app will remove all credentials, will prepapre machine and you will not have opportunity to use this VM more)


Azure Gallery - dataset of VM images, you can share gallery to others users in Azure

Resize VM:

>choose VM
>select section "Size"
>change size

Proximity Placement groups:

Normally when you create multiple virtual machines or virtual machines that are part of virtual machine scale set, these machines could be located in different data centers.
Sometimes an application/system that uses multiple virtual machines, want the virtual machines to be located closer together to get latency when it comes to communication between the virtual machines
By placing the virtual machines as part of a proximity group, the virtual machines will be physically located close to each other.
When using proximity placement groups, ensure the virtual machines have accelerated nerworking enabled. This also helps to improve network performance.
When deploying VM's from differents families or SKU's, try to deploy them as part of a single template. This will increase the probability of ensuring all VM's are deployed successfully.
A proximity placement group is assigned to a data center when the first resource (VM) is being deployed and released once the last resource is being deleted or stopped.

How to make:
>Create "Proximity Placement Group"
>choose create group in during creating VM

Azure Web App:

You don't have to maintain the underlying compute Infrastructure.
It has features such as Autoscaling and security.
It has DevOps capabilities which includes continuous deployement.

App Service planes:
>Free: max 10apps. Disk space - 1GB. Max instances - 0. Custom Domain - 0. Auto Scale - 0. Hybrid Connectivity - 0.
>Shared: max 100apps. Disk space - 1 GB. Max instances - 0. Custom Domain - Supported. Auto scale - 0. Hybrid Connectivity - 0.
>Basic: max apps - unlimited. Disk space: 10GB. Max instances - 3. Custom domain - Supported. Auto Scale - 0. Hybrid Connectivity - Supported.
>Standard: max apps - unlimited. Disk space: 50GB. Max instances - 10. Custom domain - Supported. Auto Scale - Supported. Hybrid Connectivity - Supported.
>Premium: max apps - unlimited. Disk space: 250GB. Max instances - 30. Custom domain - Supported. Auto Scale - Supported. Hybrid Connectivity - Supported.
>Isolated: max apps - unlimited. Disk space: 1 TB. Max instances - 100. Custom domain - Supported. Auto Scale - Supported. Hybrid Connectivity - Supported.

Free:

>Cores - 60 (CPU minutes / day)
>RAM - 1 GB
>Storage 1 GB
>Price: 0$ - free tier

Shared: 

>Cores - 240 (CPU minutes / day)
>RAM - 1 GB 
>Storage - 1 GB 
>Price: $0.013/hour per site

Depends on runtime stack (programming lang.) you have to choose: Linux or Win

You get a set of logging features that are available for the Azure Web App.
The different types of logging that are available are

Application Logging - This captures log messages that are generated by your application code.
Web Server Logging - This records raw HTTP request data.
Detailed Error Messages - This stores copies of the .htm error pages would have been sent to the client browser.
Deployement Logging - These are logs when you publish content to an application.
You can also stream logs in real time.

Deployment slots:

plans which supports slots: Standard, Premium and Isolated

Staging Environments for Web Apps
Applications in deployment slots have their own host names
You have the chance to validate all application changes in the staging deployment slot
You can then swap the staging slot with the production slot
This helps eliminate the downtime for your application when new changes are deployed
You can also easily roll back the changes

To upgrade plan: 
>in section "Scale up"
>change plan

Auto scaling of Web App:
>in section "Scale out"
>"custom auto scaling"

Cool down - You can also set something called a “cool down” period. This is the number of minutes to wait after a scaling operation before it can scale again. 
By default, it's set to 5 minutes. This gives the metrics a chance to stabilize again after the scaling operation. During this time the scaling process should not take into account any metrics or thresholds that get breached.
Cool down

Azure Web App VNET Integration:

Allows the App service to access resources within the VNET. But it does not allow private inbound access to your Web App from the virtual network.
use case scenario:
>to allow connect from Web App server to the DB server in your vnet

Custom Domains in Web App:

In section "Custom Domain" click "Add custom domain"

then on your domain portal add:
>TXT record
>A record

You have to wait about 1 hour

To add SSL cert:

"Create ssl cert"

Azure Web App Backups:

The backup feature that is available with Azure Web App can be used to create backups of your web app.
The backups are stored in an Azure storage account.
Here the configuration, the file content and the database connected to the application get backed up.
To use the Backup and Restore feature, the App Service Plan needs to be in the Standard, Premium or Isolated tier.
Backups of the app + database can be up to a maximum of 10 GB.

To make:
>click "Backups"
>choose backup storage
>set backup schedule

Containers:

Containers helps to package the application along with libraries, frameworks and dependencies that are required.

Docker - This is an open platform that is used for developing, shipping and running applications.
Docker has the ability to package and run an application in a loosely isolated invironment called a container.
Docker image - this is read-only template with instructions that are required to create the Docker container.
Container - This is a runnable instance of an image.

To deploy docker image on Azure:
>create "container registry"
>build Docker image (if gonna deploy to ACR - Azure container registry) then should set a name like this: "name_of_registry.azurecr.io/name_of_app":latest
>get azure-cli: apt-get install azure-cli
>login to the azure: az login
>login to repo: az acr login --name "reponame"
>docker push "name_of_registry.azurecr.io/name_of_app":latest

To deploy container to Azure:
>In "container registry" in section Access keys enable "Admin user"
>create "Container instance"

To deploy container group we should use deployment config file such deployment.yml :
apiVersion: 2019-12-01
location: northeurope
name: AppGroup
properties:
  containers: 
  - name: app
    properties:
      image: appregistry10002313.azurecr.io/myapp:latest
      resources:
        requests:
          cpu: 1
          memoryInGb: 1.5
      ports:
      - port: 80   
  osType: Linux
  ipAddress:
    type: Public
    ports:
    - protocol: tcp
      port: 80    
  imageRegistryCredentials:
    - server: appregistry10002313.azurecr.io
      username: appregistry10002313
      password: RGhhcWieDFffTCZ2DPYe=QEDqKr4NGbI
type: Microsoft.ContainerInstance/containerGroups

then upload this file to the CloudShell and execute by this command:
>az container create --resource-group container-grp --file deployment.yml

Kubernetes (K8S):

Azure Kubernetes - Managed service for Kubernetes on Azure
Kubernetes is used to orchestrate your containers for hosting your apps

Kubernetes containes:
>Kubernetes cluster - These are used for hosting your containers
>Master node - is used to control the nodes in the cluster
>slave nodes - executes commands from master nodes
>api server - all calls to the cluster from user, ONLY by api
>kubenet - kubernetes isolated network
>kubelet - This is a kubernetes agent that runs on the node. Kubelet - it registers the node with the master node. Will take commands from the master node for the deployement of containers
>Container runtime - This is used to actually taking the images and deploying the containers on the node.
>Kube-proxy is used for managing the networking aspects for the containers.

To deploy kubernetes cluster:

>create kubernetes cluster

to deploy container to cluster use deployement.yml: 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  labels:
    app: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: appregistry10002313.azurecr.io/myapp:latest
        ports:
        - containerPort: 80

To run containers as service use service.yml:

apiVersion: v1
kind: Service
metadata:
  name: app-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: myapp

Networking in kubernetes Azure:

1.Kubenet - Nodes receive an IP Address from the Azure virtual network. Pods recieve an IP address from a logically different address space to the Azure virtual network subnet..Network Address Translation is then used (NAT)
2. Azure Container Networking Interface. Every pod gets an IP address from the subnet and can be accesed directly

Kubernetes configure storage:

Azure Premium disks - Disks are only available to a single pod.
Azure files - File shares can be accessed via multiple nodes or pods.

How to make attach disk to deployement pod:

1. Ensure to first get the credentials of your cluster in Azure Cloud Shell

az aks get-credentials --resource-group test-grp --name democluster

2. Get the resource group which holds the nodes of your Azure Kubernetes cluster

az aks show --resource-group test-grp --name democluster --query nodeResourceGroup -o tsv

3. Then create a disk. Ensure to change the resource group details accordingly

az disk create --resource-group MC_test-grp_democluster_northeurope --name clusterdisk --size-gb 20 --query id --output tsv

4. Use the following app.yml file as a reference for the deployment of a pod with the use of the disk

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-image
        volumeMounts:
          - name: storage
            mountPath: /mnt/disk1
        image: nginx
        ports:
        - containerPort: 80
      volumes:
          - name: storage
            azureDisk:
              kind: Managed
              diskName: clusterdisk
              diskURI: /subscriptions/20c6eec9-2d80-4700-b0f6-4fde579a8783/resourceGroups/MC_test-grp_democluster_northeurope/providers/Microsoft.Compute/disks/clusterdisk

How to attach azure file share to K8S deployement:

1. Set variables for the storage account name and the access key

$AKS_STORAGE_ACCOUNT_NAME="newstore40000"

$STORAGE_KEY="SOME_KEY"

2. Then create a secret in the Kubernetes cluster

kubectl create secret generic azure-secret --from-literal=azurestorageaccountname=$AKS_STORAGE_ACCOUNT_NAME --from-literal=azurestorageaccountkey=$STORAGE_KEY

3. Use the following app.yml file as a reference for the deployment of a pod with the use of the file share

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-image
        volumeMounts:
          - name: storage
            mountPath: /mnt/share
        image: nginx
        ports:
        - containerPort: 80
      volumes:
          - name: storage
            azureFile:
              secretName: azure-secret
              shareName: newshare
              readOnly: false

=================================

Configure and manage virtual networking

=================================

Azure Virtual Network - Isolated network on the cloud

The network interface - hardware or virtualized hardware that connects your PC to network
network will get (private/public IP)

To create virtual network:
>create "Virtual network"

default allocating of network:

>10.0.0.0/16
>defautl subnet 10.0.0.0/24

How to add secondary network interface to VM:
>search for "network interface" resource
>create this "network interface" (create this in particular network/subnet)
>attach this to the VM

NSG - Network Security Groups:

The purpose of NSG is filtering of traffic inside of Virtual Network

There are:
>Inbound rules ( rules to define which traffic should allow/deny during INSIDE to the some host)
>Outbound rules ( rules to define which traffic should allow/deny during OUTSIDE of the some host)

Using this rule may define:
>Priority
>Port number
>Protocol
>Source and Destination

You can attach NSG or to Virtual Network Interface or Subnet but NOT to Virtual Network

By default you have 3 rules:
>65000 AllowVnetInBound - to allow traffic from Virtual Network
>65001 AllowAzureLoadBalancerInBound - to allow load balancer traffic
>65500 DenyAllInBound - to deny other traffic 

Each rule have:
>Port
>Protocol
>Source
>Destination
>Action (Deny/Allow)

Rules priority:

rules will be checking by increasing of priority number.
Example:

>RuleDenyHTTP - Priority - 200 (deny port 80 to machine 192.168.1.1)
>RuleAllowALL - priority - 300 (allow all traffic to machine 192.168.1.1)
In this case traffic will be denied cause rule with priority number 200 was matched, and others rules will not be evalueted

NSG on Subnet and VM:
>NSG rules on Subnet will evaluated first, then NSG rule on VM will be avaluated( if it will not be filtering by subnet NSG rules)

Azure Load Balancer:

This is service to distribute traffic between VMs.
In OSI model this is L4 

To use Load Balancer we have config:
>Backend pool (set of VMs wich will be served by this LB - Load Balancer)
>Public IP address (to attach to LB)
>Health Probe
>Load balancing rule

Load Balancer have 2 SKU's - 2 pricing plans:
>Basic Load Balancer:
	>Free
	>The machines in the backend pool need to be part of an availability set or scale set
	>Health probes: TCP, HTTP
	>Avaiability zones: Not Supported
	>SLA: Not supported

>Standard Load Balancer:
	>Charge per hour
	>Here the machines can also be independet machines that are part of a virtual network as a load balancer and the same location
	>Health probes: TCP,HTTP,HTTPS
	>Avaialability zones: Supported
	>SLA: 99.99%

To create a simple infrastructure with Azure Basic Load Balancer:
>Create some VMs with IIS service (better choice to do it using "Custom script extension") and during create choose "availability set", for demo you can add "text 1 and 2 " to machines to check how LB will distribute requestst :)
>Create Public IP address 
>Enable static private addreses on machines
>Create Load Balancer

During config of LB rule, we have to config Front-End IP, Protocol, Port of LB, and Backend Port ( port of machines)

NAT - Network Address Translation
NAT inbound rules - you can use this to get translated IP addresses for backend poll VMs

Better choice to use redirect port (LB port) is port from Ephemeral ports:
>form range: 49152-65535 this is temporary ports

Using this you can connect to VM using front-end ip and enter different (temporary port, which will redirect you to RDP for example) and get access to VM even without Public IP.
To use "Custom Script Extension" on the existing scale set:

1. Add the following to the install.ps1 file

Add-WindowsFeature Web-Server
Set-Content -Path "C:\inetpub\wwwroot\Default.html" -Value "This is the server $($env:computername) !"
2. Execute the following commands for custom script extensions

$config = @{
  "fileUris" = (,"https://webstorelog1000.blob.core.windows.net/script/install.ps1");
  "commandToExecute" = "powershell -ExecutionPolicy Unrestricted -File install.ps1"
}
 
$set = Get-AzVmss -ResourceGroupName "test-grp" -VMScaleSetName "demoscaleset"
$set = Add-AzVmssExtension -VirtualMachineScaleSet $set -Name "customScript" -Publisher "Microsoft.Compute" -Type "CustomScriptExtension" -TypeHandlerVersion 1.9 -Setting $config
Update-AzVmss -ResourceGroupName "test-grp" -Name "demoscaleset" -VirtualMachineScaleSet $set

to use multipools:
>You can choose port (of LB) for example on pool A 80 => 80 , on pool B 8080 => 80
>You can create second front end IP address and attach this address to the second pool
>Using second Front-End IP address we can map same port number on LB for using NAT rules

The load balancer will create an affinity between the Load Balancer and the client for a session
Advantage - Can help in better performance for sessions.
Disadvantage - if too many sessions are persisted on a server.

Azure Application Gateway:

App Gateway - OSI Layer 7 Load Balancer
The web apps can reside on Virtual Machines, VM's scales sets, or even on-premise servers.
This supports for Secure Sockets Layer Termination (SSL/TLS)
Here request to the APP Gateway can be secure
And then the requests to the backend pool resources can go unencrypted.
This can lift the burden of the backend pool for decrypting requests


When you deploy an Application Gateway you should have an empty subnet
You can use it for:
>Using Web App Firewall
>For route traffic by /path on differents VM pool

You can also enable Autoscaling for App Gateway resource.
This allows the App Gateway to scale up or down on traffic load patterns.
You can also enable the Web App FireWall feature for the App Gateway resource.
You can also enable session affinity which allows a user session to directed to the same server for processing. If the state of the user session is stored on the server, then this can be a useful feature.

Components of App Gateway:
>Frontend IP address
>Listener - this is a logical entity that checks for incoming connection requests. There can be multiple listeners attached to an application gateway. There 2 types of Listeners:
	>Basic - Here the listener listens to a single domain site.
	>Multi-site - Here the listeners maps to multiple domain sites.
>Routing Rules - This is used to route the traffic from the listener to the backend pool. There 2 types of routing rules:
	>Basic - Here all requests are routed to backend pool directly.
	>Path-based - Here requests are routed to the backend pool based on the URL in the requests.
>Backend pools - These can be Network Interface cards, VM scale sets, Public or Internal IP addresses, FQDN or backends such as App Service.
>Health Probes - This defines how the application gateway will monitor the health of the resources in the backend pool.

How to make:
>Create vnet with empty subnet for AppGeteway
>Create VM's and attach to this vnet
>Create Backend pools
>Listener and Backend targets
>create HTTP/HTTPS settings

In case of Multiple dns names:
>additionally attach dns name to pub-ip of App LoadBalancer
> then add to your domains CNAME of APp gateway dns name

Virtual Network Peering:

Virtual Network Peering is used to connect two Azure virtual networks together via the backbone network.
Azure supports connecting two virtual networks located in the same region or networks located across regions.

Once you enable virtual network peering between two virtual networks, the virtual machines can then communicate via their private IP addresses across the peering connection.
You can also peer virtual networks that are located across different subscriptions.

The virtual networks can't have overlapping CIDR blocks.

How to make:
>create at least 2 Vnets with different CIDR blocks (they can't match)
>Click on "peerings" and add new peering connection on each network (at least in one, on the second vnet it's will appear by default)

VPN:

VPN - Virtual Private Network

Your Internet Services provider will know all of the requests that are made from your machine onto the Internet.
Sometimes privacy can always be a concern
VPN is used to create a private network
Here your public IP address is not placed in the requests that are made onto the Internet
Also VPN connections are encrypted so that the data transfer is more secure

Point-to-Site VPN connection

A Point-to-Site VPN connection is used to establish a secure connection between multiple client machines an an Azure virtual network via the Internet.
 
It's used for remote work, when you have to connect from your PC to antother private network
The gateway subnet is used to host gateway VM's and services
The VM's in the gateway subnet are configured with the required VPN gateway settings

How to make Point-to-Site VPN:
>Create a vm
>Create a Vnet with VPN gateway subnet (name like: "GatewaySubnet")
>Create Vnet gateway
>Generate Self-Signed root cert
>Generate Client cert
>In section "Point-to-site config" create configuration
>

To generate Self-Signed Root cert:
$cert = New-SelfSignedCertificate -Type Custom -KeySpec Signature `
-Subject "CN=VPNRoot" -KeyExportPolicy Exportable `
-HashAlgorithm sha256 -KeyLength 2048 `
-CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign -KeyUsage CertSign

To generate Client cert (it'c generating based on Root cert):
New-SelfSignedCertificate -Type Custom -DnsName VPNCert -KeySpec Signature `
-Subject "CN=VPNCert" -KeyExportPolicy Exportable `
-HashAlgorithm sha256 -KeyLength 2048 `
-CertStoreLocation "Cert:\CurrentUser\My" `
-Signer $cert -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.2")

CIDR block for gateway subnet:
>min: /29
>recommended: /27, /26

To authenticate your machine during VPN connection, use certificates:
>Root cert - Self-Signed Root Certificate
>Client cert - Installed on laptops for connect to the VPN

Site-to-Site VPN:

It's used to VPN connection between 2 networks for example on-premise network and Azure Vnet

How to make:
>Create VM for routing (with pub IP) and install "DirectAccess and VPN" REMEMBER SHARED KEY (you will use this to configure connection Site-to-Site)
>Create a Vnet with VPN gateway subnet (name like: "GatewaySubnet")
>Create Vnet gateway
>In section "Connections" create "Site-to-site" Connection 
>Create Local Network Gateway (Here you have to enter your on-premise network details "IP" "Address space")

Azure virtual WAN:

Azure virtual WAN - tool to connect Vnets, on-premises servers in one infrastructure
Hub - You create a virtual hub in the virtual WAN resource. This is a Microsoft-managed virtual network.
You then connect the various endpoints to the Hub - Azure virtual network, Site-to-Site

To make:
>create virtual WAN
>create virtual hub
>In section "virtual network connection" of virtual WAN create connections

Azure ExpressRoute:

Allows you to connect your on-premises networks to Microsoft cloud over the private connection.
Here the connection is established with the help of a connectivity provider.

By default you get 2 connections to more redundancy.

How to create:
>Create ExpressRoute

Standard SKU - Only 1 Azure region
Premium SKU - Multiple Azure region

Network Wacther Service:

This is tool to monitor your network
Connection Monitor - Check the network connectivity between machines. These can be in Azure or on your on-premises environments.
IP flow Verify - This can be used to check if a packet is allowed or denied to or from a virtual machine. If a packet is being denied by a security group, you can see which rule is denying the packet.
Next hop - Here you can see the next route for you understand whether tha packet is being routed to the correct destination.
Connection troubleshoot - Check the connection from a virtual machine to a virtual machine, fully qualified domain name, URI or IPv4 address.
NSG Diagnostic - Provides detailed information that helps to understand and debug the security configuration of the network.
Traffic Analytics - This helps to log information about the IP traffic that is flowing through an NSG.
NSG Flow Logs - Helps to provide visility into 

Connection Troubleshoot VM:
>IN section "connection troubleshoot" check source, dst , protocol to test

Connection monitor:
>In Network Watcher you have a lot of monitoring tools
>create "connection monitor"
>Log analytics workspace - centralized solution to store your network logs

Ip flow verify:
>In Network Watcher you have a lot of monitoring tools
>create "IP flow verify"

Next hop:
>In Network Watcher you have a lot of monitoring tools
>create "Next hop"

NSG Diagnostics:
>Assign target subnet to Network Watcher
>Create "NSG Diagnostic"

NSG Flow Logs:
>To store your logs we have to create new "Storage acc" (or use existing)
>Create  "flow log" in network watcher
>In create storage acc after deploying new "Flow Log" will appear logs container

Flow logs in JSON format:
>UniTime format
>Source IP
>Destination IP
>Source Port number
>Destination port number
>TCP/UDP
>Inbound/Outbound
>Deny/Allow

User define routes:

Like a user you can define specific way to distribute traffic (for example , throw the forward server with FireWall)

how to forward traffic from SubnetA throw the Central subnet to subnet B:
>Create 3 VMs in different subnets
>Create route table, during creating select "Virtual appliance" and set "address prefix" as address of whole vnet, like a next hop address set IP of central-VM
>After creating route table, associte subnets to this route table
>On centralVM in network interface => ip configurations => Enable IP forwarding
>Enable IP forwarding on central VM => install "Remote Access" throw the Server Manager => "Routing"  and "DirectAccess" => Start installed soft => "Deploy VPN only" => click centralvm and enable "Enable routing and remote Access" => Configure LAN routing

Azure FireWall:

Has built-in high availability.
Can deploy the Azure FireWall Instance across two or more Availability zones - 99.99% SLA
You can filter traffic based on fully-qualified domain names
You can also create network filtering rules Based on source and destination IP address, port and protocol
It is stateful in nature, so it understands what packets of data to allow
It has built-in Threat Intelligence - Here you can get alerts or deny traffic from/to malicious IP addresses and domains

How to make:
>Create special subnet "AzureFirewallSubnet" /24 CIDR block
>Create Firewall by "Microsoft"
>In section "FireWall policy" => DNAT Rules => Add a rule collection
>You can add "Route Table" and associate our VM subnet => then create route to connect to the Internet throw the FireWall
>Add "Application rules" in "Firewall policy"

DNS:

DNS - Domain Name System

How to associate DNS name with VM:
>Buy domain name 
>Paste pub IP to the Domain Name portal on  - A record

How to create Internal DNS in azure vnet:
>Configure DNS server VM => Install "DNS server" 
>Configure other VMs to work with this DNS server
>In vnet settings section "DNS servers" => Enter IP address of DNS server VM
>Create new A record in DNS server

Private DNS:
>Configure "DNS servers" as azure
>Create Private DNS zone
>Add virtual link to current Azure Vnet and Enable "Auto registration"

Public DNS:
>Create DNS zone, this service just allow to have "DNS zone" you still have to be owner of particular DNS name
>Cange NS records - to the Azure Public DNS zone ns records after this request will be redirected to the Azure Public DNS zone 
>Add record set to the Public DNS => Associate public IP address to the root domain


=====================================================================

Azure Implement and manage storage

=====================================================================

Azure Storage Accounts - This provides storage on the cloud

Storage services:
>Blob
>Table
>Queue
>Fileshare

Storage account types:
>Standard General Purpose V2:
	>Blob
	>File shares
	>Queues
	>Tables
>Premium block blobs (This is supported for block and append blobs), when you want to fast access to your blobs high transaction rates:
	>blobs
>Premium Page blobs (Used for virtuals disks images, disks):
	>blobs
>Premium file shares (this is for fast access to your files in fileshare):
	>file shares
	
Blob service:

This service is optimized for storing large amounts of unstructure data.
To store files we have to create container.
The all files will uploaded as a separate object. Each object will have uniq url

Block blobs - This is made up of blocks of data that can managed individually.
Append blobs - These are block blobsthat are optimized for append operations - Good for logging
Page blobs - This is used for virtual hard drive files for Azure virtual machines.

Access to the blob:
Every blob object URL creates by: azure blob storage name + container name + file name = appstorage4040.blob.core.windows.net/data/AZ-104.JPG
By default as admin you have access to files in portal Azure
You can change access to container level:
>private (no anonymous access)
>Blob (anonymous read access for individual blobs only)
>Container ( anonymous read access for containers and blobs) Itread - user will be able to list objects within the container

Different authorization techniques:
>Access Keys
>Shared Access Signatures
>Azure Acitve Directory

Azure storage explorer:

This is desktop tool to explore Azure Storage accounts,containers,blobs, etc.

Access Keys:

This used to give to someone access to Storage account

How to make:
>In storage account in section "Access keys"
>Using this key in "Azure storage account explorer" => in section "Storage account or service" use this keys to see files

In this case user will get access to all services and all data in the Storage Acc

Shared Access Signatures - Blob Level:

How to make:
>Select file and "Generate SAS"
>Generate SAS token and URL

Using this URL we can get access to particular blob

Shared Access Signatures - At the Storage Account Level

To get Shared Access Signatures at the account level.

How to make:
>In Storage acc. in section "Shared access signature" here we can choose allowed services, permissions etc.
>Generate SAS and connection string

But you can't use Web Browser for use generated URL, you HAVE to USE Azure Storage Explorer

Stored Access Policy:

>You can create in section of container "Access Policy" => Stored Access Policy
>Then in Azure Storage Explorer => in particular conatiner click "Shared Access Signature" => Attach created policy
>Then using created SAS url (In Storage Explorer) we can attach our container as anonymous user

If this SAS came to the wrong hands:
>You can desable all permissions from this policy

Active Directory Authentication:

We can give access using Azure AD:

>In storage account => Access Control => Add role assignment 
>Give access to particular user or user group

Then using for example Azure Storage Explorer current user will have access

Data redundancy:

Multiple copies of your data are stored
This helps to protect against planned and unplanned events - transient hardware failures, network or power outages.

Types of storage redundancy:
>Locally-redundant storage:
	>When you upload your data file, there will be 3 copies. It helps to protect against server rack of drive failures
	>But if Data Center will go down - you will lost the data.
>Zone-redundant storage:
	>Here data is replicated synchronously across three Azure availability zones
	>Each availability zone is a seperate physical location with independent power, cooling and networking.
>Geo-redundant storage:
	>Your data will be replicated in another region
	>Regions where Azure will store your files - Paired Regions
	>Data is copied three times in the primary region using LRS then data will copied 3 times in the secondary region using LRS
>Read-access geo-redundant storage:
	>if the requirement that app should get access to data even if primary region is go down
	>Costs will increase
Geo-zone-redundant storage:
	> in Primary region data will replicated by zone redundant storage


